     1                                  bits 32
     2                                  
     3                                  global start
     4                                  
     5                                  extern exit
     6                                  import exit msvcrt.dll
     7                                  
     8                                  segment data use32 class=data
     9 00000000 0519377F                    s db 5, 25, 55, 127 ; 101, 11001, 110111, 1111111
    10                                      len equ $-s
    11 00000000 <rept>                      d times len db ; 2, 3, 5, 7
    11          ******************       warning: no operand for data declaration
    12                                      
    13                                  segment code use32 class=code
    14                                      start:
    15                                          ;4.Se da un sir de octeti s. Sa se construiasca sirul de octeti d, care contine pe fiecare pozitie numarul de biti 1 ai octetului de pe pozitia corespunzatoare din s.
    16 00000000 BE[00000000]                    mov esi, s      ;DS:ESI = s
    17 00000005 BF[04000000]                    mov edi, d      ;ES:EDI = d
    18 0000000A FC                              cld             ;parcurgem sirul de la stanga la dreapta (DF=0). 
    19 0000000B B904000000                      mov ecx, len    ;ecx = lungime s
    20                                          
    21 00000010 E324                            jecxz endFor    ;cand ecx este 0 se opreste loop-ul, adica lungimea este 0
    22                                          
    23                                          LOOP:
    24 00000012 AC                                  lodsb
    25 00000013 BB00000000                          mov ebx, 0            
    26 00000018 BA00000000                          mov edx, 0       
    27                                              
    28                                              calcul:
    29 0000001D 3C00                                    cmp al, 0 ;verif daca octetul este 0
    30 0000001F 7410                                    je sfarsit
    31                                                  
    32 00000021 89C2                                    mov edx, eax       ; edx = octetul     
    33 00000023 D0E8                                    shr al, 1          ; shift la dr ca sa verificam fiecare bit
    34 00000025 83E201                                  and edx, 1         ; verif cel mai mic bit a lui edx
    35                                                  
    36 00000028 83FA00                                  cmp edx, 0        
    37 0000002B 74F0                                    jz calcul          ;daca este zero sarim la urmatoarea iteratie
    38                                                  
    39 0000002D FEC3                                    inc bl              ; daca este 1, incremantam contorul de biti
    40 0000002F EBEC                                    jmp calcul ; se continua
    41                                              sfarsit:
    42                                              
    43 00000031 88D8                                mov al, bl
    44 00000033 AA                                  stosb                   ; rezultatul e in d[i]
    45 00000034 E2DC                            loop LOOP
    46                                          endFor:
    47                                          
    48 00000036 6A00                            push dword 0
    49 00000038 FF15[00000000]                  call [exit]
